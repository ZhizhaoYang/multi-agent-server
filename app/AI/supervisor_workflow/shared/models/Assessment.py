from pydantic import BaseModel, Field
from typing import List, Optional
from app.AI.supervisor_workflow.shared.models.Nodes import NodeNames_Dept

class Task(BaseModel):
    task_id: str = Field(..., description="A unique identifier for the task (e.g., 'task_001').")
    priority: int = Field(...,gt=0, description="The priority of the task, higher is more important.")
    description: str = Field(..., description="A clear, concise description of what needs to be done for this specific task.")
    dependent_tasks: List[str] = Field(default_factory=list, description="Specifies dependencies (IDs of other tasks).")
    expected_output: str = Field(..., description="Describes what the successful completion of this task should produce.")
    suggested_department: NodeNames_Dept = Field(..., description="The department that is best suited to handle this task.")


class LLMAssessmentOutput(BaseModel):
    tasks: List[Task] = Field(default=[], description="A list of tasks that need to be completed, generated by the LLM in the assessment node.")
    assessment_summary: str = Field(default="", description="A brief overall summary of the user's intent and the collection of tasks.")
