from langgraph.graph import END
from langgraph.types import Command
import asyncio

from app.AI.supervisor_workflow.shared.models import ChatState
from app.utils.logger import logger


async def stream_final_output_directly(response_text: str, publisher):
    """Stream the final output directly as response content, not as thought chunks"""
    try:
        if publisher is not None and response_text:
            # Stream each character of the final response directly
            for char_position, char in enumerate(response_text, 1):
                await publisher.publish_final_output(
                    content=char,
                    segment_id=char_position
                )
                await asyncio.sleep(0.01)  # Small delay between characters

            # Send final completion signal
            await publisher.publish_final_output_complete(
                total_length=len(response_text)
            )

            logger.info(f"Streamed final output directly: {len(response_text)} characters total")
    except Exception as e:
        logger.error(f"Warning: Could not stream final output: {e}")


async def final_response_node(state: ChatState) -> Command:
    """
    Final response node that streams the final_output directly to the client.

    This node:
    1. Takes the final_output generated by the aggregator
    2. Streams it directly as the actual response content (not as thought chunks)
    3. Ends the workflow
    """

    logger.info(f"!! Final Response node starting !!")
    logger.info(f"!! Final output length: {len(state.final_output)} characters !!")

    # Get publisher for streaming
    publisher = state.get_stream_publisher()

    try:
        # Stream the final output directly as response content
        await stream_final_output_directly(state.final_output, publisher)
        logger.info(f"!! Final output streaming completed successfully !!")

        return Command(
            goto=END
        )

    except Exception as e:
        logger.error(f"!! Final response node error: {e} !!")

        return Command(
            goto=END
        )